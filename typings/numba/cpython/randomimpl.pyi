"""
This type stub file was generated by pyright.
"""

import random
import numpy as np
from numba.core.extending import overload
from numba.core import types
from numba.core.overload_glue import glue_lowering

"""
Implement the random and np.random module functions.
"""
POST_PY38 = ...
registry = ...
lower = ...
int32_t = ...
int64_t = ...
def const_int(x): # -> Constant:
    ...

double = ...
N = ...
N_const = ...
rnd_state_t = ...
rnd_state_ptr_t = ...
def get_state_ptr(context, builder, name):
    """
    Get a pointer to the given thread-local random state
    (depending on *name*: "py" or "np").
    If the state isn't initialized, it is lazily initialized with
    system entropy.
    """
    ...

def get_py_state_ptr(context, builder):
    """
    Get a pointer to the thread-local Python random state.
    """
    ...

def get_np_state_ptr(context, builder):
    """
    Get a pointer to the thread-local Numpy random state.
    """
    ...

def get_internal_state_ptr(context, builder):
    """
    Get a pointer to the thread-local internal random state.
    """
    ...

def get_index_ptr(builder, state_ptr):
    ...

def get_array_ptr(builder, state_ptr):
    ...

def get_has_gauss_ptr(builder, state_ptr):
    ...

def get_gauss_ptr(builder, state_ptr):
    ...

def get_rnd_shuffle(builder): # -> Function:
    """
    Get the internal function to shuffle the MT taste.
    """
    ...

def get_next_int32(context, builder, state_ptr):
    """
    Get the next int32 generated by the PRNG at *state_ptr*.
    """
    ...

def get_next_double(context, builder, state_ptr):
    """
    Get the next double generated by the PRNG at *state_ptr*.
    """
    ...

def get_next_int(context, builder, state_ptr, nbits, is_numpy):
    """
    Get the next integer with width *nbits*.
    """
    ...

@glue_lowering("random.seed", types.uint32)
def seed_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.seed", types.uint32)
def seed_impl(context, builder, sig, args):
    ...

@glue_lowering("random.random")
def random_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.random")
@glue_lowering("np.random.random_sample")
@glue_lowering("np.random.sample")
@glue_lowering("np.random.ranf")
def random_impl(context, builder, sig, args):
    ...

@glue_lowering("random.gauss", types.Float, types.Float)
@glue_lowering("random.normalvariate", types.Float, types.Float)
def gauss_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.standard_normal")
@glue_lowering("np.random.normal")
@glue_lowering("np.random.normal", types.Float)
@glue_lowering("np.random.normal", types.Float, types.Float)
def np_gauss_impl(context, builder, sig, args):
    ...

@glue_lowering("random.getrandbits", types.Integer)
def getrandbits_impl(context, builder, sig, args):
    ...

@glue_lowering("random.randrange", types.Integer)
def randrange_impl_1(context, builder, sig, args):
    ...

@glue_lowering("random.randrange", types.Integer, types.Integer)
def randrange_impl_2(context, builder, sig, args):
    ...

@glue_lowering("random.randrange", types.Integer, types.Integer, types.Integer)
def randrange_impl_3(context, builder, sig, args):
    ...

@glue_lowering("random.randint", types.Integer, types.Integer)
def randint_impl_1(context, builder, sig, args):
    ...

@glue_lowering("np.random.randint", types.Integer)
def randint_impl_2(context, builder, sig, args):
    ...

@glue_lowering("np.random.randint", types.Integer, types.Integer)
def randrange_impl_2(context, builder, sig, args):
    ...

@glue_lowering("random.uniform", types.Float, types.Float)
def uniform_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.uniform", types.Float, types.Float)
def uniform_impl(context, builder, sig, args):
    ...

def uniform_impl(context, builder, sig, args, state):
    ...

@glue_lowering("random.triangular", types.Float, types.Float)
def triangular_impl_2(context, builder, sig, args):
    ...

@glue_lowering("random.triangular", types.Float, types.Float, types.Float)
def triangular_impl_3(context, builder, sig, args):
    ...

@glue_lowering("np.random.triangular", types.Float, types.Float, types.Float)
def triangular_impl_3(context, builder, sig, args):
    ...

@glue_lowering("random.gammavariate", types.Float, types.Float)
def gammavariate_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.standard_gamma", types.Float)
@glue_lowering("np.random.gamma", types.Float)
@glue_lowering("np.random.gamma", types.Float, types.Float)
def gammavariate_impl(context, builder, sig, args):
    ...

@glue_lowering("random.betavariate", types.Float, types.Float)
def betavariate_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.beta", types.Float, types.Float)
def betavariate_impl(context, builder, sig, args):
    ...

@glue_lowering("random.expovariate", types.Float)
def expovariate_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.exponential", types.Float)
def exponential_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.standard_exponential")
@glue_lowering("np.random.exponential")
def exponential_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.lognormal")
@glue_lowering("np.random.lognormal", types.Float)
@glue_lowering("np.random.lognormal", types.Float, types.Float)
def np_lognormal_impl(context, builder, sig, args):
    ...

@glue_lowering("random.lognormvariate", types.Float, types.Float)
def lognormvariate_impl(context, builder, sig, args):
    ...

@glue_lowering("random.paretovariate", types.Float)
def paretovariate_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.pareto", types.Float)
def pareto_impl(context, builder, sig, args):
    ...

@glue_lowering("random.weibullvariate", types.Float, types.Float)
def weibullvariate_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.weibull", types.Float)
def weibull_impl(context, builder, sig, args):
    ...

@glue_lowering("random.vonmisesvariate", types.Float, types.Float)
def vonmisesvariate_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.vonmises", types.Float, types.Float)
def vonmisesvariate_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.binomial", types.Integer, types.Float)
def binomial_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.chisquare", types.Float)
def chisquare_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.f", types.Float, types.Float)
def f_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.geometric", types.Float)
def geometric_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.gumbel", types.Float, types.Float)
def gumbel_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.hypergeometric", types.Integer, types.Integer, types.Integer)
def hypergeometric_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.laplace")
@glue_lowering("np.random.laplace", types.Float)
@glue_lowering("np.random.laplace", types.Float, types.Float)
def laplace_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.logistic")
@glue_lowering("np.random.logistic", types.Float)
@glue_lowering("np.random.logistic", types.Float, types.Float)
def logistic_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.logseries", types.Float)
def logseries_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.negative_binomial", types.int64, types.Float)
def negative_binomial_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.poisson")
@glue_lowering("np.random.poisson", types.Float)
def poisson_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.power", types.Float)
def power_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.rayleigh")
@glue_lowering("np.random.rayleigh", types.Float)
def rayleigh_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.standard_cauchy")
def cauchy_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.standard_t", types.Float)
def standard_t_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.wald", types.Float, types.Float)
def wald_impl(context, builder, sig, args):
    ...

@glue_lowering("np.random.zipf", types.Float)
def zipf_impl(context, builder, sig, args):
    ...

def do_shuffle_impl(arr, rng): # -> Callable[..., None]:
    ...

@overload(random.shuffle)
def shuffle_impl(arr): # -> Callable[..., None]:
    ...

@overload(np.random.shuffle)
def shuffle_impl(arr): # -> Callable[..., None]:
    ...

@overload(np.random.permutation)
def permutation_impl(x): # -> Callable[..., Any]:
    ...

@overload(np.random.rand)
def rand(*size): # -> Callable[..., float]:
    ...

@overload(np.random.randn)
def randn(*size): # -> Callable[..., float]:
    ...

@overload(np.random.choice)
def choice(a, size=..., replace=...): # -> Callable[..., Any]:
    ...

@overload(np.random.multinomial)
def multinomial(n, pvals, size=...): # -> Callable[..., NDArray[signedinteger[_NBitIntP]]]:
    ...

@overload(np.random.dirichlet)
def dirichlet(alpha, size=...): # -> Callable[..., NDArray[float64]]:
    ...

@overload(np.random.noncentral_chisquare)
def noncentral_chisquare(df, nonc, size=...): # -> Callable[..., float | Any]:
    ...

