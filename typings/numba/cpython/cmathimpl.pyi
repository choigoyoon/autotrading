"""
This type stub file was generated by pyright.
"""

import cmath
from numba.core import types

"""
Implement the cmath module functions.
"""
registry = ...
lower = ...
def is_nan(builder, z):
    ...

def is_inf(builder, z):
    ...

def is_finite(builder, z):
    ...

@lower(cmath.isnan, types.Complex)
def isnan_float_impl(context, builder, sig, args):
    ...

@lower(cmath.isinf, types.Complex)
def isinf_float_impl(context, builder, sig, args):
    ...

@lower(cmath.isfinite, types.Complex)
def isfinite_float_impl(context, builder, sig, args):
    ...

@lower(cmath.rect, types.Float, types.Float)
def rect_impl(context, builder, sig, args):
    ...

def intrinsic_complex_unary(inner_func): # -> Callable[..., Any]:
    ...

NAN = ...
INF = ...
@lower(cmath.exp, types.Complex)
@intrinsic_complex_unary
def exp_impl(x, y, x_is_finite, y_is_finite): # -> complex:
    """cmath.exp(x + y j)"""
    ...

@lower(cmath.log, types.Complex)
@intrinsic_complex_unary
def log_impl(x, y, x_is_finite, y_is_finite): # -> complex:
    """cmath.log(x + y j)"""
    ...

@lower(cmath.log, types.Complex, types.Complex)
def log_base_impl(context, builder, sig, args):
    """cmath.log(z, base)"""
    ...

@lower(cmath.log10, types.Complex)
def log10_impl(context, builder, sig, args):
    ...

@lower(cmath.phase, types.Complex)
@intrinsic_complex_unary
def phase_impl(x, y, x_is_finite, y_is_finite): # -> float:
    """cmath.phase(x + y j)"""
    ...

@lower(cmath.polar, types.Complex)
@intrinsic_complex_unary
def polar_impl(x, y, x_is_finite, y_is_finite): # -> tuple[float, float]:
    """cmath.polar(x + y j)"""
    ...

@lower(cmath.sqrt, types.Complex)
def sqrt_impl(context, builder, sig, args):
    ...

@lower(cmath.cos, types.Complex)
def cos_impl(context, builder, sig, args):
    ...

@lower(cmath.cosh, types.Complex)
def cosh_impl(context, builder, sig, args):
    ...

@lower(cmath.sin, types.Complex)
def sin_impl(context, builder, sig, args):
    ...

@lower(cmath.sinh, types.Complex)
def sinh_impl(context, builder, sig, args):
    ...

@lower(cmath.tan, types.Complex)
def tan_impl(context, builder, sig, args):
    ...

@lower(cmath.tanh, types.Complex)
def tanh_impl(context, builder, sig, args):
    ...

@lower(cmath.acos, types.Complex)
def acos_impl(context, builder, sig, args):
    ...

@lower(cmath.acosh, types.Complex)
def acosh_impl(context, builder, sig, args):
    ...

@lower(cmath.asinh, types.Complex)
def asinh_impl(context, builder, sig, args):
    ...

@lower(cmath.asin, types.Complex)
def asin_impl(context, builder, sig, args):
    ...

@lower(cmath.atan, types.Complex)
def atan_impl(context, builder, sig, args):
    ...

@lower(cmath.atanh, types.Complex)
def atanh_impl(context, builder, sig, args):
    ...

