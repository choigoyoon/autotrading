"""
This type stub file was generated by pyright.
"""

from numba.core import types
from .templates import AbstractTemplate, AttributeTemplate, bound_function

registry = ...
infer = ...
infer_global = ...
infer_getattr = ...
@infer_global(set)
class SetBuiltin(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


@infer_getattr
class SetAttribute(AttributeTemplate):
    key = types.Set
    @bound_function("set.add")
    def resolve_add(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.clear")
    def resolve_clear(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.copy")
    def resolve_copy(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.discard")
    def resolve_discard(self, set, args, kws): # -> Signature:
        ...
    
    @bound_function("set.pop")
    def resolve_pop(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.remove")
    def resolve_remove(self, set, args, kws): # -> Signature:
        ...
    
    @bound_function("set.update")
    def resolve_update(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.difference_update")
    def resolve_difference_update(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.intersection_update")
    def resolve_intersection_update(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.symmetric_difference_update")
    def resolve_symmetric_difference_update(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.difference")
    def resolve_difference(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.intersection")
    def resolve_intersection(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.symmetric_difference")
    def resolve_symmetric_difference(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.union")
    def resolve_union(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.isdisjoint")
    def resolve_isdisjoint(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.issubset")
    def resolve_issubset(self, set, args, kws): # -> Signature | None:
        ...
    
    @bound_function("set.issuperset")
    def resolve_issuperset(self, set, args, kws): # -> Signature | None:
        ...
    


class SetOperator(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


class SetComparison(AbstractTemplate):
    def generic(self, args, kws): # -> Signature | None:
        ...
    


