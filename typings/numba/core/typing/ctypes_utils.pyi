"""
This type stub file was generated by pyright.
"""

"""
Support for typing ctypes function pointers.
"""
_FROM_CTYPES = ...
_TO_CTYPES = ...
def from_ctypes(ctypeobj): # -> NoneType | CPointer | Boolean | Integer | Float | RawPointer | Opaque:
    """
    Convert the given ctypes type to a Numba type.
    """
    ...

def to_ctypes(ty): # -> type[_Pointer[c_void_p]] | type[_Pointer[c_bool]] | type[_Pointer[c_byte]] | type[_Pointer[c_int16]] | type[_Pointer[c_int32]] | type[_Pointer[c_int64]] | type[_Pointer[c_ubyte]] | type[_Pointer[c_uint16]] | type[_Pointer[c_uint32]] | type[_Pointer[c_uint64]] | type[_Pointer[c_float]] | type[_Pointer[c_double]] | type[_Pointer[py_object[Any]]] | type[c_void_p] | type[c_bool] | c_int8 | type[c_int16] | type[c_int32] | type[c_int64] | c_uint8 | type[c_uint16] | type[c_uint32] | type[c_uint64] | type[c_float] | type[c_double] | type[py_object[Any]] | None:
    """
    Convert the given Numba type to a ctypes type.
    """
    ...

def is_ctypes_funcptr(obj): # -> bool:
    ...

def get_pointer(ctypes_func): # -> int | None:
    """
    Get a pointer to the underlying function for a ctypes function as an
    integer.
    """
    ...

def make_function_type(cfnptr): # -> ExternalFunctionPointer:
    """
    Return a Numba type for the given ctypes function pointer.
    """
    ...

