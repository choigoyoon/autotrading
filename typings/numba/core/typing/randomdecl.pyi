"""
This type stub file was generated by pyright.
"""

import random
import numpy as np
from .templates import CallableTemplate, ConcreteTemplate
from numba.np.numpy_support import numpy_version
from numba.core.overload_glue import glue_typing

registry = ...
infer = ...
infer_global = ...
infer_getattr = ...
_int_types = ...
_float_types = ...
def normalize_shape(shape): # -> tuple[Integer, Literal[1]] | tuple[UniTuple, int]:
    ...

class RandomTemplate(CallableTemplate):
    """
    A template helper to transparently handle the typing of array-returning
    np.random.* functions.
    """
    def array_typer(self, scalar_typer, size=...): # -> Callable[..., Any]:
        ...
    


class ConcreteRandomTemplate(RandomTemplate):
    """
    A RandomTemplate subclass using the `cases` attribute as a list of
    allowed scalar signatures.
    """
    def array_typer(self, size=...): # -> Callable[..., Any]:
        ...
    


@glue_typing(random.getrandbits, typing_key="random.getrandbits")
class Random_getrandbits(ConcreteTemplate):
    cases = ...


@glue_typing(random.random, typing_key="random.random")
@glue_typing(np.random.random, typing_key="np.random.random")
class Random_random(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


if numpy_version >= (1, 17):
    ...
@glue_typing(random.randint, typing_key="random.randint")
class Random_randint(ConcreteTemplate):
    cases = ...


@glue_typing(np.random.randint, typing_key="np.random.randint")
class Random_randint(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(random.randrange, typing_key="random.randrange")
class Random_randrange(ConcreteTemplate):
    cases = ...


@glue_typing(random.seed, typing_key="random.seed")
@glue_typing(np.random.seed, typing_key="np.random.seed")
class Random_seed(ConcreteTemplate):
    cases = ...


@glue_typing(np.random.geometric, typing_key="np.random.geometric")
@glue_typing(np.random.logseries, typing_key="np.random.logseries")
@glue_typing(np.random.zipf, typing_key="np.random.zipf")
class Numpy_geometric(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.binomial, typing_key="np.random.binomial")
@glue_typing(np.random.negative_binomial, typing_key="np.random.negative_binomial")
class Numpy_negative_binomial(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.poisson, typing_key="np.random.poisson")
class Numpy_poisson(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.exponential, typing_key="np.random.exponential")
@glue_typing(np.random.rayleigh, typing_key="np.random.rayleigh")
class Numpy_exponential(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.hypergeometric, typing_key="np.random.hypergeometric")
class Numpy_hypergeometric(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.laplace, typing_key="np.random.laplace")
@glue_typing(np.random.logistic, typing_key="np.random.logistic")
@glue_typing(np.random.lognormal, typing_key="np.random.lognormal")
@glue_typing(np.random.normal, typing_key="np.random.normal")
class Numpy_normal(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.gamma, typing_key="np.random.gamma")
class Numpy_gamma(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.triangular, typing_key="np.random.triangular")
class Random_ternary_distribution(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.beta, typing_key="np.random.beta")
@glue_typing(np.random.f, typing_key="np.random.f")
@glue_typing(np.random.gumbel, typing_key="np.random.gumbel")
@glue_typing(np.random.uniform, typing_key="np.random.uniform")
@glue_typing(np.random.vonmises, typing_key="np.random.vonmises")
@glue_typing(np.random.wald, typing_key="np.random.wald")
@glue_typing(random.betavariate, typing_key="random.betavariate")
@glue_typing(random.gammavariate, typing_key="random.gammavariate")
@glue_typing(random.gauss, typing_key="random.gauss")
@glue_typing(random.lognormvariate, typing_key="random.lognormvariate")
@glue_typing(random.normalvariate, typing_key="random.normalvariate")
@glue_typing(random.uniform, typing_key="random.uniform")
@glue_typing(random.vonmisesvariate, typing_key="random.vonmisesvariate")
@glue_typing(random.weibullvariate, typing_key="random.weibullvariate")
class Random_binary_distribution(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.chisquare, typing_key="np.random.chisquare")
@glue_typing(np.random.pareto, typing_key="np.random.pareto")
@glue_typing(np.random.power, typing_key="np.random.power")
@glue_typing(np.random.standard_gamma, typing_key="np.random.standard_gamma")
@glue_typing(np.random.standard_t, typing_key="np.random.standard_t")
@glue_typing(np.random.weibull, typing_key="np.random.weibull")
@glue_typing(random.expovariate, typing_key="random.expovariate")
@glue_typing(random.paretovariate, typing_key="random.paretovariate")
class Random_unary_distribution(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(np.random.standard_cauchy, typing_key="np.random.standard_cauchy")
@glue_typing(np.random.standard_normal, typing_key="np.random.standard_normal")
@glue_typing(np.random.standard_exponential, typing_key="np.random.standard_exponential")
class Random_nullary_distribution(ConcreteRandomTemplate):
    cases = ...
    def generic(self): # -> Callable[..., Any]:
        ...
    


@glue_typing(random.triangular, typing_key="random.triangular")
class Random_triangular(ConcreteTemplate):
    cases = ...


