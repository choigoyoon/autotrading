"""
This type stub file was generated by pyright.
"""

import contextlib
from numba.core.descriptors import TargetDescriptor
from numba.core import cpu, dispatcher, utils

class _NestedContext:
    _typing_context = ...
    _target_context = ...
    @contextlib.contextmanager
    def nested(self, typing_context, target_context): # -> Generator[None, Any, None]:
        ...
    


class CPUTarget(TargetDescriptor):
    options = cpu.CPUTargetOptions
    _nested = ...
    @property
    def target_context(self): # -> cached_property:
        """
        The target context for CPU targets.
        """
        ...
    
    @property
    def typing_context(self): # -> cached_property:
        """
        The typing context for CPU targets.
        """
        ...
    
    def nested_context(self, typing_context, target_context): # -> _GeneratorContextManager[None, None, None]:
        """
        A context manager temporarily replacing the contexts with the
        given ones, for the current thread of execution.
        """
        ...
    


cpu_target = ...
class CPUDispatcher(dispatcher.Dispatcher):
    targetdescr = ...


class DelayedRegistry(utils.UniqueDict):
    """
    A unique dictionary but with deferred initialisation of the values.

    Attributes
    ----------
    ondemand:

        A dictionary of key -> value, where value is executed
        the first time it is is used.  It is used for part of a deferred
        initialization strategy.
    """
    def __init__(self, *args, **kws) -> None:
        ...
    
    def __getitem__(self, item):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    


