"""
This type stub file was generated by pyright.
"""

"""
Provides wrapper functions for "glueing" together Numba implementations that are
written in the "old" style of a separate typing and lowering implementation.
"""
class _OverloadWrapper:
    """This class does all the work of assembling and registering wrapped split
    implementations.
    """
    def __init__(self, function, typing_key=...) -> None:
        ...
    
    def wrap_typing(self): # -> Callable[..., Any]:
        """
        Use this to replace @infer_global, it records the decorated function
        as a typer for the argument `concrete_function`.
        """
        ...
    
    def wrap_impl(self, *args): # -> Callable[..., Any]:
        """
        Use this to replace @lower*, it records the decorated function as the
        lowering implementation
        """
        ...
    


class _Gluer:
    """This is a helper class to make sure that each concrete overload has only
    one wrapper as the code relies on the wrapper being a singleton."""
    def __init__(self) -> None:
        ...
    
    def __call__(self, func, typing_key=...): # -> _OverloadWrapper:
        ...
    
    def defer_lowering(self, key, lower_fn): # -> None:
        """Defer lowering of the given key and lowering function.
        """
        ...
    
    def add_no_defer(self, key): # -> None:
        """Stop lowering to be deferred for the given key.
        """
        ...
    
    def flush_deferred_lowering(self, key): # -> None:
        """Flush the deferred lowering for the given key.
        """
        ...
    


_overload_glue = ...
def glue_typing(concrete_function, typing_key=...): # -> Callable[..., Any]:
    """This is a decorator for wrapping the typing part for a concrete function
    'concrete_function', it's a text-only replacement for '@infer_global'"""
    ...

def glue_lowering(*args): # -> Callable[..., Any]:
    """This is a decorator for wrapping the implementation (lowering) part for
    a concrete function. 'args[0]' is the concrete_function, 'args[1:]' are the
    types the lowering will accept. This acts as a text-only replacement for
    '@lower/@lower_builtin'"""
    ...

