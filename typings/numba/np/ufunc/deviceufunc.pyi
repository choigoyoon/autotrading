"""
This type stub file was generated by pyright.
"""

from numba.np.ufunc.ufuncbuilder import _BaseUFuncBuilder

"""
Implements custom ufunc dispatch mechanism for non-CPU devices.
"""
class UFuncMechanism:
    """
    Prepare ufunc arguments for vectorize.
    """
    DEFAULT_STREAM = ...
    SUPPORT_DEVICE_SLICING = ...
    def __init__(self, typemap, args) -> None:
        """Never used directly by user. Invoke by UFuncMechanism.call().
        """
        ...
    
    def get_arguments(self): # -> list[None]:
        """Prepare and return the arguments for the ufunc.
        Does not call to_device().
        """
        ...
    
    def get_function(self):
        """Returns (result_dtype, function)
        """
        ...
    
    def is_device_array(self, obj): # -> Literal[False]:
        """Is the `obj` a device array?
        Override in subclass
        """
        ...
    
    def as_device_array(self, obj):
        """Convert the `obj` to a device array
        Override in subclass

        Default implementation is an identity function
        """
        ...
    
    def broadcast_device(self, ary, shape):
        """Handles ondevice broadcasting

        Override in subclass to add support.
        """
        ...
    
    def force_array_layout(self, ary):
        """Ensures array layout met device requirement.

        Override in sublcass
        """
        ...
    
    @classmethod
    def call(cls, typemap, args, kws):
        """Perform the entire ufunc call mechanism.
        """
        ...
    
    def to_device(self, hostary, stream):
        """Implement to device transfer
        Override in subclass
        """
        ...
    
    def to_host(self, devary, stream):
        """Implement to host transfer
        Override in subclass
        """
        ...
    
    def device_array(self, shape, dtype, stream):
        """Implements device allocation
        Override in subclass
        """
        ...
    
    def launch(self, func, count, stream, args):
        """Implements device function invocation
        Override in subclass
        """
        ...
    


def to_dtype(ty): # -> dtype[Any]:
    ...

class DeviceVectorize(_BaseUFuncBuilder):
    def __init__(self, func, identity=..., cache=..., targetoptions=...) -> None:
        ...
    
    @property
    def pyfunc(self): # -> Any:
        ...
    
    def add(self, sig=..., argtypes=..., restype=...): # -> None:
        ...
    
    def build_ufunc(self):
        ...
    


class DeviceGUFuncVectorize(_BaseUFuncBuilder):
    def __init__(self, func, sig, identity=..., cache=..., targetoptions=...) -> None:
        ...
    
    @property
    def pyfunc(self): # -> Any:
        ...
    
    def add(self, sig=..., argtypes=..., restype=...): # -> None:
        ...
    


def expand_gufunc_template(template, indims, outdims, funcname, argtypes):
    """Expand gufunc source template
    """
    ...

class GUFuncEngine:
    '''Determine how to broadcast and execute a gufunc
    base on input shape and signature
    '''
    @classmethod
    def from_signature(cls, signature): # -> Self:
        ...
    
    def __init__(self, inputsig, outputsig) -> None:
        ...
    
    def schedule(self, ishapes): # -> GUFuncSchedule:
        ...
    


class GUFuncSchedule:
    def __init__(self, parent, ishapes, oshapes, loopdims, pinned) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class GenerializedUFunc:
    def __init__(self, kernelmap, engine) -> None:
        ...
    
    def __call__(self, *args, **kws):
        ...
    


class GUFuncCallSteps:
    __slots__ = ...
    def __init__(self, nin, nout, args, kwargs) -> None:
        ...
    
    def adjust_input_types(self, indtypes): # -> None:
        """
        Attempt to cast the inputs to the required types if necessary
        and if they are not device array.

        Side effect: Only affects the element of `norm_inputs` that requires
        a type cast.
        """
        ...
    
    def allocate_outputs(self, schedule, outdtype): # -> None:
        ...
    
    def prepare_kernel_parameters(self): # -> None:
        ...
    
    def post_process_result(self):
        ...
    
    def prepare_inputs(self): # -> None:
        ...
    
    def launch_kernel(self, kernel, nelem, args):
        ...
    
    def is_device_array(self, obj):
        ...
    
    def as_device_array(self, obj):
        ...
    
    def to_device(self, hostary):
        ...
    
    def device_array(self, shape, dtype):
        ...
    


